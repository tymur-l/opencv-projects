# CUDA 12, so requires nvidia driver >=525.60.13
# https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#id5
# FROM quay.io/jupyter/tensorflow-notebook:cuda-2024-04-19 as jupyter-base

# Using pytorch image instead with CUDA 11, because OS has older nvidia drivers
FROM quay.io/jupyter/pytorch-notebook:cuda11-2024-05-06 as jupyter-base

USER root

RUN <<EOF
export FFMPEG_VERSION="7:4.4.2-0ubuntu0.22.04.1"

apt update -y
apt install -y --no-install-recommends \
  libpng-dev=1.6.37-3build5 libjpeg-dev=8c-2ubuntu10 libopenexr-dev=2.5.7-1 libtiff-dev=4.3.0-6ubuntu0.10 \
  libwebp-dev=1.2.2-2ubuntu0.22.04.2 \
  \
  libgstreamer-plugins-base1.0-dev=1.20.1-1ubuntu0.2 libgstreamer1.0-dev=1.20.3-0ubuntu1 \
  \
  libgtk-3-dev=3.24.33-1ubuntu2.2 libgtkglext1-dev=1.2.0-11 \
  \
  "libavutil-dev=${FFMPEG_VERSION}" \
  "libavcodec-dev=${FFMPEG_VERSION}" \
  "libavformat-dev=${FFMPEG_VERSION}" \
  "libavdevice-dev=${FFMPEG_VERSION}" \
  "libavfilter-dev=${FFMPEG_VERSION}" \
  "libswscale-dev=${FFMPEG_VERSION}" \
  "libswresample-dev=${FFMPEG_VERSION}" \
  "libpostproc-dev=${FFMPEG_VERSION}"
EOF

# Copy Nvidia Codec SDK
COPY ./build/deps/nvidia-codec-sdk/Lib/linux/stubs/x86_64/*.so /usr/local/cuda/lib64/
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/opt/conda/lib/python3.11/site-packages/nvidia/cublas/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cuda_cupti/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cuda_nvcc/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cuda_nvrtc/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cuda_runtime/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cudnn/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cufft/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/curand/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cusolver/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cusparse/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/nccl/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/nvjitlink/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cublas/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cuda_cupti/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cuda_nvcc/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cuda_nvrtc/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cuda_runtime/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cudnn/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cufft/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/curand/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cusolver/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/cusparse/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/nccl/lib/:/opt/conda/lib/python3.11/site-packages/nvidia/nvjitlink/lib/:/usr/local/cuda/lib64/"
RUN echo "/usr/local/cuda/lib64" > /etc/ld.so.conf.d/nvidia-libs.conf

USER ${NB_UID}

COPY ./*-requirements.txt /tmp/
RUN mamba install --yes --file /tmp/conda-requirements.txt && \
  mamba clean --all -f -y && \
  fix-permissions "${CONDA_DIR}" && \
  fix-permissions "/home/${NB_USER}"
RUN pip install --no-cache-dir -r /tmp/pypi-requirements.txt && \
  fix-permissions "${CONDA_DIR}" && \
  fix-permissions "/home/${NB_USER}"

USER root
# Copy nvidia lib installed by conda to be discovered by CUDA OpenCV
RUN <<EOF
echo "/opt/conda/lib/libnppc.so
/opt/conda/lib/libnppial.so
/opt/conda/lib/libnppicc.so
/opt/conda/lib/libnppidei.so
/opt/conda/lib/libnppif.so
/opt/conda/lib/libnppig.so
/opt/conda/lib/libnppim.so
/opt/conda/lib/libnppist.so
/opt/conda/lib/libnppitc.so" | \
  awk '{ print $1".11" }' | \
  awk -F '/' '{ print $0"\n/usr/local/cuda/lib64/"$NF }' | \
  xargs -L 2 ln -s
EOF

# Set up necessary folders and groups:
# - QT will use this directory when displaying GUI, so it needs to be created
#   and have proper permissions
# - Ensure the notebook user is in the video group, so that it can access webcam
#   passed to the container
ENV XDG_RUNTIME_DIR="/run/user/${NB_UID}"
ENV OPENCV_UI_BACKEND="QT"
RUN <<EOF
mkdir -p "${XDG_RUNTIME_DIR}"
chown "${NB_UID}":"${NB_GID}" "${XDG_RUNTIME_DIR}"
chmod 700 "${XDG_RUNTIME_DIR}"

# groupadd video
usermod -aG video "${NB_USER}"
EOF

USER ${NB_UID}

COPY --chown="${NB_USER}" ./deps/opencv-build/opencv*.whl /tmp/

# TODO: make it a conda package and install via mamba?
RUN pip install --no-cache-dir /tmp/opencv*.whl && \
  fix-permissions "${CONDA_DIR}" && \
  fix-permissions "/home/${NB_USER}" && \
  rm -rf /tmp/opencv*.whl

VOLUME /opt/conda/share/jupyter/lab/settings
